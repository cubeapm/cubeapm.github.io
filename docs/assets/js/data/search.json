[
  
  {
    "title": "OpenTelemetry Python | Tutorial with a sample Python app instrumentation",
    "url": "/docs/posts/python-tutorial/",
    "categories": "Auto-instrumentation, Python",
    "tags": "python, autoinstrumentation",
    "date": "2023-04-01 00:00:00 +0530",
    





    
    "snippet": "OpenTelemetry is a vendor-agnostic instrumentation library under CNCF. It can be used to instrument your Python applications to generate telemetry data. Let’s learn how it works and see how to visu...",
    "content": "OpenTelemetry is a vendor-agnostic instrumentation library under CNCF. It can be used to instrument your Python applications to generate telemetry data. Let’s learn how it works and see how to visualize that data with CubeApm.What is OpenTelemetry?​OpenTelemetry emerged as a single project after the merging of OpenCensus(from Google) and OpenTracing(from Uber) into a single project. The project aims to make telemetry data(logs, metrics, and traces) a built-in feature of cloud-native software applications.OpenTelemetry has laguage-specific implementation for generating telemetry data which includes OpenTelemetry Python libraries.You can check out the current releases of opentelemetry-python.OpenTelemetry only generates telemetry data and lets you decide where to send your data for analysis and visualization. In this article, we will be using CubeApm - an open-source full-stack application performance monitoring tool as our analysis backend.Steps to get started with OpenTelemetry for a Python application:  Installing CubeApm  Installing sample Python app  Instrumentation with OpenTelemetry and sending data to CubeApmInstalling CubeApm​You can get started with CubeApm using just three commands at your terminal.git clone -b main https://github.com/CubeApm/CubeApm.gitcd CubeApm/deploy/./install.shFor detailed instructions, you can visit our documentation.When you are done installing CubeApm, you can access the UI at: http://localhost:3301The application list shown in the dashboard is from a sample app called HOT R.O.D that comes bundled with the CubeApm installation package.CubeApm dashboardInstalling sample Python app​Prerequisites  Python 3.4 or newerIf you do not have Python installed on your system, you can download it from the link. Check the version of Python using python3 --version on your terminal to see if Python is properly installed or not.      MongoDBIf you already have MongoDB services running on your system, you can skip this step.    For macOS: https://docs.mongodb.com/manual/tutorial/install-mongodb-on-os-x/    For Linux: https://docs.mongodb.com/manual/administration/install-on-linux/    For Ubuntu: https://docs.mongodb.com/manual/tutorial/install-mongodb-on-ubuntu/    For Windows: https://docs.mongodb.com/manual/tutorial/install-mongodb-on-windows/    On MacOS the installation is done using Homebrew’s brew package manager. Once the installation is done, don’t forget to start MongoDB services using brew services start mongodb/brew/mongodb-community@4.4  on your macOS terminal.    starting mongoDB services from mac terminal  Steps to get the Python app up and running​      Clone sample Flask app repository and go to the root folder    git clone https://github.com/CubeApm/sample-flask-app.gitcd sample-flask-app            Check if the app is running    python3 app.py      mac terminal commands for running a python appYou can now access the UI of the app on your local host: http://localhost:5002/Python app UIInstrumentation with OpenTelemetry and sending data to CubeApm​      Opentelemetry Python instrumentation installationYour app folder contains a file called requirements.txt. This file contains all the necessary commands to set up OpenTelemetry Python instrumentation. All the mandatory packages required to start the instrumentation are installed with the help of this file. Make sure your path is updated to the root directory of your sample app and run the following command:    pip3 install -r requirements.txt        If it hangs while installing grpcio during pip3 install opentelemetry-exporter-otlp then follow below steps as suggested in this stackoverflow link.          pip3 install –upgrade pip      python3 -m pip install –upgrade setuptools      pip3 install –no-cache-dir –force-reinstall -Iv grpcio            Install application specific packagesThis step is required to install packages specific to the application. Make sure to run this command in the root directory of your installed application. This command figures out which instrumentation packages the user might want to install and installs it for them:    opentelemetry-bootstrap --action=install            Configure a span exporter and run your applicationYou’re almost done. In the last step, you just need to configure a few environment variables for your OTLP exporters. Environment variables that need to be configured:          service.name- application service name (you can name it as you like)      OTEL_EXPORTER_OTLP_ENDPOINT - In this case, IP of the machine where CubeApm is installed        You need to put these environment variables in the below command.    note    Don’t run app in reloader/hot-reload mode as it breaks instrumentation.    OTEL_RESOURCE_ATTRIBUTES=service.name=&lt;service_name&gt; OTEL_EXPORTER_OTLP_ENDPOINT=\"http://&lt;IP of CubeApm&gt;:4317\" opentelemetry-instrument python3 app.py        As we are running CubeApm on local host, IP of CubeApm can be replaced with localhost in this case. And, for service_name let’s use pythonApp. Hence, the final command becomes:    Final Command    OTEL_RESOURCE_ATTRIBUTES=service.name=pythonApp OTEL_EXPORTER_OTLP_ENDPOINT=\"http://localhost:4317\" opentelemetry-instrument python3 app.py        And, congratulations! You have instrumented your sample Python app. You can now access the CubeApm dashboard at http://localhost:3301 to monitor your app for performance metrics.  CubeApm dashboard showing python app in its list of applicationsMetrics and Traces of the Python application​CubeApm makes it easy to visualize metrics and traces captured through OpenTelemetry instrumentation.CubeApm comes with out of box RED metrics charts and visualization. RED metrics stands for:  Rate of requests  Error rate of requests  Duration taken by requestsCubeApm dashboard showing the popular RED metrics for application performance monitoringYou can then choose a particular timestamp where latency is high to drill down to traces around that timestamp.View of traces at a particular timestampYou can use flamegraphs to exactly identify the issue causing the latency.Flamegraphs showing exact duration taken by each spans - a concept of distributed tracingConclusion​OpenTelemetry makes it very convenient to instrument your Python application. You can then use an open-source APM tool like CubeApm to analyze the performance of your app. As CubeApm offers a full-stack observability tool, you don’t have to use multiple tools for your monitoring needs."
  },
  
  {
    "title": "OpenTelemetry Nodejs | Tutorial with a sample Nodejs app instrumentation",
    "url": "/docs/posts/node-tutorial/",
    "categories": "Auto-instrumentation, Nodejs",
    "tags": "nodejs, autoinstrumentation",
    "date": "2023-04-01 00:00:00 +0530",
    





    
    "snippet": "OpenTelemetry can auto-instrument many common modules for a Javascript application. The telemetry data captured can then be sent to CubeApm for analysis and visualization.Creating sample Nodejs app...",
    "content": "OpenTelemetry can auto-instrument many common modules for a Javascript application. The telemetry data captured can then be sent to CubeApm for analysis and visualization.Creating sample Nodejs application​You need to ensure that you have Node.js version 12 or newer. You can download the latest version of Node.js here. For the sample application, let’s create a basic ‘hello world’ express.js application.If you do not want to follow these steps manually, you can directly check out the GitHub repo of the sample application. You can run the app directly after cloning it and start sending data to CubeApm. The code is already instrumented with OpenTelemetry libraries.But, it would be better if you follow these steps to understand what’s happening.Check if node is installed on your machine by using the below command:node -vSteps to get the app set up and running:      Make a directory and install expressMake a directory for your sample app on your machine. Then open up the terminal, navigate to the directory path and install express with the following command:    npm i express            Create index.js Create a file called index.js in your directory and with any text editor setup your ‘Hello World’ file with the code below:    const express = require(\"express\");const cors = require(\"cors\");const PORT = process.env.PORT || \"5555\";const app = express();app.use(cors());app.use(express.json());app.all(\"/\", (req, res) =&gt; {  res.json({ method: req.method, message: \"Hello World\", ...req.body });});app.get(\"/404\", (req, res) =&gt; {  res.sendStatus(404);});app.listen(parseInt(PORT, 10), () =&gt; {  console.log(`Listening for requests on http://localhost:${PORT}`);});            Check if your application is workingRun your application by using the below command at your terminal.    node index.js        You can check if your app is working by visiting: http://localhost:5555/    Once you are finished checking, exit the application by using Ctrl + C on your terminal.  Set up OpenTelemetry and send data to CubeApm​      Install OpenTelemetry packagesYou will need the following OpenTelemetry packages for this sample application.    npm install --save @opentelemetry/sdk-nodenpm install --save @opentelemetry/auto-instrumentations-nodenpm install --save @opentelemetry/exporter-trace-otlp-http        The dependencies included are briefly explained below:    @opentelemetry/sdk-node - This package provides the full OpenTelemetry SDK for Node.js including tracing and metrics.    @opentelemetry/auto-instrumentations-node - This module provides a simple way to initialize multiple Node instrumentations.    @opentelemetry/exporter-trace-otlp-http - This module provides the exporter to be used with OTLP (http/json) compatible receivers.        Create tracing.js fileInstantiate tracing by creating a tracing.js file and using the below code.    const express = require(\"express\");const cors = require(\"cors\");const PORT = process.env.PORT || \"5555\";const app = express();app.use(cors());app.use(express.json());app.all(\"/\", (req, res) =&gt; {  res.json({ method: req.method, message: \"Hello World\", ...req.body });});app.get(\"/404\", (req, res) =&gt; {  res.sendStatus(404);});app.listen(parseInt(PORT, 10), () =&gt; {  console.log(`Listening for requests on http://localhost:${PORT}`);});      OpenTelemetry Node SDK currently does not detect the OTEL_RESOURCE_ATTRIBUTES from .env files as of today. That’s why we need to include the variables in the tracing.js file itself.About environment variables:service_name: name of the service you want to monitorenvironment: dev, prod, staging, etc.http://localhost:4318/v1/traces is the default url for sending your tracing data. We are assuming you have installed CubeApm on your localhost. Based on your environment, you can update it accordingly. It should be in the following format:http://&lt;IP of CubeApm backend&gt;:4318/v1/tracesnoteRemember to allow incoming requests to port 4318 of machine where CubeApm backend is hosted.      Run your applicationNow when you run your application, OpenTelemetry captures telemetry data from it and send it to CubeApm.    node -r ./tracing.js index.js      You can check your application running at http://localhost:5555/. You need to generate some load in order to see data reported on CubeApm dashboard. Refresh the endpoint for 10-20 times, and wait for 2-3 mins.And, congratulations! You have instrumented your sample Node.js app. You can now access the CubeApm dashboard at http://localhost:3301 to monitor your app for performance metrics.Sample_app in the list of applications monitoredMetrics, Traces and Logs of the Nodejs application​CubeApm makes it easy to visualize metrics and traces captured through OpenTelemetry instrumentation.CubeApm comes with out of box RED metrics charts and visualization. RED metrics stands for:  Rate of requests  Error rate of requests  Duration taken by requestsMeasure things like application latency, requests per sec, error percentage and see your top endpointsYou can then choose a particular timestamp where latency is high to drill down to traces around that timestamp.View of traces at a particular timestampYou can use flamegraphs to exactly identify the issue causing the latency.Flamegraphs showing exact duration taken by each spans - a concept of distributed tracingYou can also use CubeApm for log management. For Nodejs applications, you can use the winston logger to send logs to CubeApm.Logs management in CubeApmConclusion​OpenTelemetry makes it very convenient to instrument your Nodejs application. You can then use an open-source APM tool like CubeApm to analyze the performance of your app. As CubeApm offers a full-stack observability tool, you don’t have to use multiple tools for your monitoring needs."
  },
  
  {
    "title": "OpenTelemetry Java | Tutorial with a sample Java app instrumentation",
    "url": "/docs/posts/java-tutorial/",
    "categories": "Auto-instrumentation, Java",
    "tags": "java, autoinstrumentation",
    "date": "2023-04-01 00:00:00 +0530",
    





    
    "snippet": "OpenTelemetry is a vendor-agnostic instrumentation library. In this article, let’s explore how to auto-instrument a Tomcat Java application using OpenTelemetry Java JAR agent.After capturing teleme...",
    "content": "OpenTelemetry is a vendor-agnostic instrumentation library. In this article, let’s explore how to auto-instrument a Tomcat Java application using OpenTelemetry Java JAR agent.After capturing telemetry data with OpenTelemetry, we will use CubeApm, an open-source full-stack observability tool, to visualize the data.Steps to get started with OpenTelemetry for Tomcat Java application:  Installing CubeApm  Installing sample Tomcat Java application  Auto Instrumentation with OpenTelemetry Java agent  Getting metrics and traces for Tomcat application in CubeApmInstalling CubeApm​You can get started with CubeApm using just three commands at your terminal.git clone -b main https://github.com/CubeApm/CubeApm.gitcd CubeApm/deploy/./install.shFor detailed instructions, you can visit our documentation.We have installed CubeApm on a Ubuntu VM in Azure cloud. You can access CubeApm UI at http://IP_of_CubeApm:3301. You can access CubeApm UI at port: 3301 of any host that you choose. In case of local host just use: http://localhost:3301The application list shown in the dashboard is from a sample app called HOT R.O.D that comes bundled with the CubeApm installation package.CubeApm DashboardInstalling sample Tomcat Java application​Prerequisites:Make sure you have Tomcat installed on your system. If not, then you can download it from Apache Tomcat website. For this tutorial I have used Tomcat 10.0.8.Steps to install sample Tomcat Java application:​  Download an example app packaged as a war file provided at Apache Tomcat official website - Sample Tomcat app      The easiest way to run the sample app is to move it to webapps folder inside the Tomcat directory.    cd Tomcat/webappscp ~/Downloads/sample.war .            Once you have copied the file in the webapps folder, get back to the Tomcat folder and run the app using the following command.    cd ..bin/startup.sh            Check if the sample app is running at: http://localhost:8080/sample/ . The sample should open up like below.    By clicking on the links shown on the page, you can see that it makes dummy calls to a page as part of the Hello World application.  Auto Instrumentation with OpenTelemetry Java agent​OpenTelemetry has a very handy Java JAR agent that can be attached to any Java 8+ application for instrumenting Java applications.. The JAR agent can detect a number of popular libraries and frameworks and instrument it right out of the box. You don’t need to add any code for that.  Download the latest Java JAR agent.  For the Tomcat application, you need to setup a few environment variables. You need to create and add a new file setenv.sh in your Tomcat bin folder. The ./startup.sh command which is used to run the Java app will check for setenv.sh file and run the commands accordingly.      In setenv.sh file, paste the following environment variables using a code editor:    export CATALINA_OPTS=\"$CATALINA_OPTS -javaagent:/path/opentelemetry-javaagent.jar\"export OTEL_EXPORTER_OTLP_ENDPOINT=&lt;IP of CubeApm Backend&gt;:4317export OTEL_RESOURCE_ATTRIBUTES=service.name=&lt;app_name&gt;        In the CATALINA_OPTS environment variable, you need to replace path with the path of the folder location where you have saved the OpenTelemetry Java agent downloaded in step 1.    The OTEL_EXPORTER_OTLP_ENDPOINT specifies the endpoint for CubeApm’s backend. In place of IP of CubeApm backend, you need to put the IP of host machine where CubeApm is installed. Also, remember to allow incoming requests to port 4317 of the machine where CubeApm backend is hosted.    OTEL_RESOURCE_ATTRIBUTES is used to specify the service name of the service being monitored. So the final environment variables will look like below. Note that:    export CATALINA_OPTS=\"$CATALINA_OPTS -javaagent:/Users/cruxaki/Downloads/opentelemetry-javaagent.jar\"export OTEL_EXPORTER_OTLP_ENDPOINT=http://40.76.59.122:4317export OTEL_RESOURCE_ATTRIBUTES=service.name=Tomcat-CubeApm        Make sure that you have saved this file as setenv.sh and in your Tomcat bin folder, because when starting up, Catalina checks this file for environment variables.        Now we need to restart our Tomcat Java app with the OpenTelemetry Java agent attached to it. Make sure you’re at your Tomcat home folder and then restart the Tomcat server using following commands:    bin/shutdown.shbin/startup.sh        Check out the sample Tomcat app again at  http://localhost:8080/sample/ and play around with it to generate some load. It might take 1-2 minutes before it starts showing up in the CubeApm dashboard.    Below you can find your Tomcat-CubeApm app in the list of applications being monitored.    Tomcat-CubeApm shows up in the list of applications monitored by CubeApm  Metrics and Traces of the Tomcat Java Application​CubeApm makes it easy to visualize metrics and traces captured through OpenTelemetry instrumentation.CubeApm comes with out of box RED metrics charts and visualization. RED metrics stands for:  Rate of requests  Error rate of requests  Duration taken by requestsCubeApm UI showing popular RED metrics of application performanceYou can then choose a particular timestamp where latency is high to drill down to traces around that timestamp.View of traces at a particular timestampYou can use flamegraphs to identify the issue causing the latency.Flamegraphs used for distributed tracing in CubeApm dashboardConclusion​OpenTelemetry makes it very convenient to instrument your Spring Boot application. You can then use an open-source APM tool like CubeApm to analyze the performance of your app. As CubeApm offers a full-stack observability tool, you don’t have to use multiple tools for your monitoring needs."
  },
  
  {
    "title": "OpenTelemetry Golang | Tutorial with a sample Go app instrumentation",
    "url": "/docs/posts/go-tutorial/",
    "categories": "Auto-instrumentation, Go",
    "tags": "go, autoinstrumentation",
    "date": "2023-04-01 00:00:00 +0530",
    





    
    "snippet": "OpenTelemetry can be used to generate telemetry data from your Go applications. The collected data can then be sent to an observability tool for storage and visualization. OpenTelemetry is an open-...",
    "content": "OpenTelemetry can be used to generate telemetry data from your Go applications. The collected data can then be sent to an observability tool for storage and visualization. OpenTelemetry is an open-source project under the Cloud Native Computing Foundation (CNCF) that aims to standardize the generation and collection of telemetry data.In this tutorial, we will use OpenTelemetry Go libraries to instrument a Go application and then visualize it using an open-source observability tool - CubeApm.Steps to get started with OpenTelemetry for Go applications:  Installing CubeApm  Instrumenting a Go application with OpenTelemetry  Adding custom attributes and custom events to spans  Monitoring your Go application with CubeApm dashboardsInstalling CubeApm​First, you need to install CubeApm so that OpenTelemetry can send the data to it.CubeApm can be installed on macOS or Linux machines in just three steps by using a simple install script.The install script automatically installs Docker Engine on Linux. However, on macOS, you must manually install Docker Engine before running the install script.git clone -b main https://github.com/CubeApm/CubeApm.gitcd CubeApm/deploy/./install.shYou can visit our documentation for instructions on how to install CubeApm using Docker Swarm and Helm Charts.When you are done installing CubeApm, you can access the UI at http://localhost:3301CubeApm dashboard - It shows services from a sample app that comes bundled with the applicationInstrumenting a Go application with OpenTelemetry​Step 1: Get sample Go app from GitHubThe sample Go app repo contains the boilerplate code that we will instrument.If you want to follow along with the tutorial, then you should follow the without-instrumentation branch.Step 2: Install dependenciesDependencies related to OpenTelemetry exporter and SDK have to be installed first. Run the below commands after navigating to the application source folder:go get go.opentelemetry.io/otelgo.opentelemetry.io/otel/tracego.opentelemetry.io/otel/sdkgo.opentelemetry.io/contrib/instrumentation/github.com/gin-gonic/gin/otelgingo.opentelemetry.io/otel/exporters/otlp/otlptracego.opentelemetry.io/otel/exporters/otlp/otlptrace/otlptracegrpcStep 3: Declare environment variables for configuring OpenTelemetryDeclare the following variables in main.go which we will use to configure OpenTelemetry:var (    serviceName  = os.Getenv(\"SERVICE_NAME\")    collectorURL = os.Getenv(\"OTEL_EXPORTER_OTLP_ENDPOINT\")    insecure     = os.Getenv(\"INSECURE_MODE\"))Step 4: Instrument your Go application with OpenTelemetryTo configure your application to send data we will need a function to initialize OpenTelemetry. Add the following snippet of code in your main.go file.import (    \"github.com/gin-gonic/gin\"    \"go.opentelemetry.io/otel\"    \"go.opentelemetry.io/otel/attribute\"    \"go.opentelemetry.io/otel/exporters/otlp/otlptrace\"    \"go.opentelemetry.io/otel/exporters/otlp/otlptrace/otlptracegrpc\"    \"go.opentelemetry.io/otel/sdk/resource\"    sdktrace \"go.opentelemetry.io/otel/sdk/trace\")func initTracer() func(context.Context) error {    secureOption := otlptracegrpc.WithTLSCredentials(credentials.NewClientTLSFromCert(nil, \"\"))    if len(insecure) &gt; 0 {        secureOption = otlptracegrpc.WithInsecure()    }    exporter, err := otlptrace.New(        context.Background(),        otlptracegrpc.NewClient(            secureOption,            otlptracegrpc.WithEndpoint(collectorURL),        ),    )    if err != nil {        log.Fatal(err)    }    resources, err := resource.New(        context.Background(),        resource.WithAttributes(            attribute.String(\"service.name\", serviceName),            attribute.String(\"library.language\", \"go\"),        ),    )    if err != nil {        log.Printf(\"Could not set resources: \", err)    }    otel.SetTracerProvider(        sdktrace.NewTracerProvider(            sdktrace.WithSampler(sdktrace.AlwaysSample()),            sdktrace.WithBatcher(exporter),            sdktrace.WithResource(resources),        ),    )    return exporter.Shutdown}Step 5: Initialize the tracer in main.goModify the main function to initialise the tracer in main.gofunc main() {    cleanup := initTracer()    defer cleanup(context.Background())    ......}Step 6: Add the OpenTelemetry Gin middlewareConfigure Gin to use the middleware by adding the following lines in main.go.import (    ....  \"go.opentelemetry.io/contrib/instrumentation/github.com/gin-gonic/gin/otelgin\")func main() {    ......    r := gin.Default()    r.Use(otelgin.Middleware(serviceName))    ......}Step 7: Set environment variables and run your Go Gin applicationNow that you have instrumented your Go Gin application with OpenTelemetry, you need to set some environment variables to send data to CubeApm backend:SERVICE_NAME: goGinApp (you can name it whatever you want)OTEL_EXPORTER_OTLP_ENDPOINT: localhost:4317Since, we have installed CubeApm on our local machine, we use the above IP. If you install CubeApm on a different machine, you can update it with the relevant IP.Hence, the final run command looks like this:SERVICE_NAME=goGinApp INSECURE_MODE=true OTEL_EXPORTER_OTLP_ENDPOINT=localhost:4317 go run main.goAnd, congratulations! You have instrumented your sample Golang app.Hit the /books endpoint of the bookstore app at http://localhost:8090/books. Refresh it a bunch of times in order to generate load, and wait for 1-2 mins for data to appear on CubeApm dashboard.Adding custom attributes and custom events to spans​It’s also possible to set custom attributes or tags to a span. To add custom attributes and events follow the below steps:Step 1: Import trace and attribute librariesimport (    ...    \"go.opentelemetry.io/otel/attribute\"    \"go.opentelemetry.io/otel/trace\")Step 2: Fetch current span from context  span := trace.SpanFromContext(c.Request.Context())Step 3: Set attribute on current  span.SetAttributes(attribute.String(\"controller\", \"books\"))CubeApm dashboards can be used to track these custom attributes.Custom attributes can seen under `Tags` section on CubeApm trace detail pageWe can also set custom event on the span with it’s own attribute.span.AddEvent(\"This is a sample event\", trace.WithAttributes(attribute.Int(\"pid\", 4328), attribute.String(\"sampleAttribute\", \"Test\")))You can also see these custom events on CubeApm dashboard.Events can be seen under `Events` section on CubeApm trace detail pageEvents can be seen under Events section on CubeApm trace detail pageMonitor your Go application with CubeApm dashboards​With the above steps, you have instrumented your Go application with OpenTelemetry. OpenTelemetry sends the collected data to CubeApm which can be used to store it and visualize it. Let’s see how CubeApm can help you monitor your Go application.You need to interact with your sample application a bit to generate some monitoring data. As mentioned earlier, hit the /books endpoint of the bookstore app at http://localhost:8090/books and refresh it a bunch of times in order to generate load.You can then navigate to http://localhost:3301/application (needs signup) to see your Go app being monitored.Go to Metrics→ goGinApp→ you will be able to see the dashboard.Your Go Gin application being monitored on the CubeApm dashboardYou can monitor application metrics like application latency, requests per second, error percentage, etc. with the Metrics tab of CubeApm.You can monitor your Go Gin application metrics like application latency, requests per second, error percentage, etc.OpenTelemetry captures tracing data from your Gin application as well. Tracing data can help you visualize how user requests perform across services in a multi-service application.In the Traces tab of CubeApm, you can analyze the tracing data using filters based on tags, status codes, service names, operations, etc.Use powerful filters to analyze your tracing data from the Gin applicationYou can also visualize your tracing data with the help of flamegraphs and Gantt charts.Flamegraphs and Gantt charts on CubeApm dashboardConclusion​Using OpenTelemetry libraries, you can instrument your Go applications for setting up observability. You can then use an open-source APM tool like CubeApm to ensure the smooth performance of your Go applications.OpenTelemetry is the future for setting up observability for cloud-native apps. It is backed by a huge community and covers a wide variety of technology and frameworks. Using OpenTelemetry, engineering teams can instrument polyglot and distributed applications with peace of mind."
  }
  
]

